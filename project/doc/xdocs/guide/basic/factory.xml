<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "../../../schema/dtd/document-v20.dtd">
<document>
	<header>
		<title>Expression Factory</title>
	</header>
	<body>
		<p>
			To start using the EL, you need an instance of <code>javax.el.ExpressionFactory</code>.
			The expression factory is used to create expressions of various types.
		</p>
		<p>
			<em>JUEL</em>'s expression factory implementation is <code>de.odysseus.el.ExpressionFactoryImpl</code>.
			The easiest way to obtain an expression factory instance is
		</p>
		<source>javax.el.ExpressionFactory factory = new de.odysseus.el.ExpressionFactoryImpl();</source>
		<p>
			An expression factory is thread-safe and can create an unlimited number of expressions.
			The expression factory provides operations to
		</p>
		<ul>
			<li>perform <a href="#coerce">type coercions</a>,</li>
			<li>create <a href="site:value#tree">tree value expressions</a>,</li>
			<li>create <a href="site:value#object">object value expressions</a>,</li>
			<li>create <a href="site:method#tree">tree method expressions</a>.</li>
		</ul>
		<section>
			<title>Expression Cache</title>
			<p>
				Each factory instance uses its own expression cache. Caching expressions can be an
				important issue, because parsing is relative expensive. An expression cache
				maps expression strings to their parsed representations (trees).
			</p>
			<p>
				<em>JUEL</em> provides a caching interface which allows applications to use their
				own caching mechanism. However, in most scenarios, <em>JUEL</em>'s default
				implementation should be fine. It uses two maps as follows:
			</p>
			<ul>
				<li>
					The primary map is implemented by a <code>java.util.LinkedHashMap</code>.
					If the maximum cache size has been reached and another element should be added, the least
					recently used (lru) entry is removed from the primary map and added to the secondary map.
				 </li>
				 <li>
					The secondary map is implemented by a <code>java.util.WeakHashMap</code>.
					Entries are guaranteed to stay as long as there are any strong references to their
					expression strings. No more referenced, the corresponding map entry may be removed
					by the garbage collector.
				 </li>
			</ul>
			<p>
				The default constructor uses a maximum cache size of 1000. You may specify a different
				value - say 5000 - by specifying the <code>javax.el.cacheSize</code> property.
			</p>
			<source>java.util.Properties properties = new java.util.Properties();
properties.put("javax.el.cacheSize", "5000");
javax.el.ExpressionFactory factory = new de.odysseus.el.ExpressionFactoryImpl(properties);</source>
			<p>
				Using your own caching mechanism is covered in the <a href="site:../advanced">Advanced
				Topics</a> secion.
			</p>
		</section>
		<section id="coerce">
			<title>Type Conversions</title>
			<p>
				Type conversions are performed at several points while evaluating expressions.
			</p>
			<ul>
				<li>Operands are coerced when performing arithmetic or logical operations</li>
				<li>Value expression results are coerced to the expected type specified at creation time</li>
				<li>For literal method expressions the text is coerced to the type specified at creation time</li>
				<li>For non-literal method expressions the last property is coerced to a method name</li>
				<li>Composite expression coerce their sub-expressions to strings before concatenating them</li>
			</ul>
			<p>
				All these coercions are done following the same rules.
				The specification describes these coercion rules in detail. It supports converting between string,
				character, boolean, enumeration and number types. Additionally, the conversion of strings to other types
				is supported by the use of (Java Beans) property editors.
				The EL makes the coercion rules available to client applications via the expression factory method
			</p>
			<source>ExpressionFactoryImpl.coerceToType(Object, Class&lt;?>)</source>
			<p>
				whose return type is <code>Object</code>.
			</p>
			<p>
				<em>JUEL</em> can be configured to use alternative coercion rules as described
				in the <a href="site:../advanced">Advanced Topics</a> secion.
			</p>
		</section>
		<section id="config">
			<title>Factory Configuration</title>
			<p>
				The factory may be configured via property files. The mechanism described here
				is used when an expression factory is created without specifying properties.
				The lookup procedure for properties is as follows:
			</p>
			<ol>
				<li>
					<code>JAVA_HOME/lib/el.properties</code> -
					If this file contains property <code>javax.el.ExpressionFactory</code>
					whose value is <code>de.odysseus.el.ExpressionFactoryImpl</code>, its
					properties are loaded and taken as default properties.
				</li>
				<li>
					<code>System.getProperties()</code> -
					if the previous rule (1) did not match and system property
					<code>javax.el.ExpressionFactory</code> is set to
					<code>de.odysseus.el.ExpressionFactoryImpl</code>,
					the system properties are taken as default properties.
				</li>
				<li>
					<code>el.properties</code> anywhere on your classpath -
					These properties may override the default properties from (1) or (2).
				</li>
				</ol>
			<p>
				Having this, the following properties are read:
			</p>
			<ul>
				<li>
					<code>javax.el.cacheSize</code> - expression cache size (default is 1000)
				</li>
				<li>
					<code>javax.el.methodInvocations</code> - set to <code>true</code> to allow method invocations.
					Please refer to the <a href="site:../advanced#methodInvocations">Advanced Topics</a> section for more on this.
				</li>
				<li>
					<code>javax.el.nullProperties</code> - set to <code>true</code> to resolve <code>null</code>
					properties.
					Please refer to the <a href="site:../advanced#nullProperties">Advanced Topics</a> section for more on this.
				</li>
				<li>
					<code>javax.el.varArgs</code> - set to <code>true</code> to allow vararg function/method calls
					in your expressions.
				</li>
			</ul>
			<p>
				The factory class also provides constructors which let you explicitly pass your
				properties. If you just want to switch between JEE5 and JEE6 style, <em>JUEL</em>
				provides enum constants to use as profiles.
			</p>
		</section>
	</body>
</document>
