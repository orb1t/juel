<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "../../schema/dtd/document-v20.dtd">
<document>
	<header>
		<title>Specification Issues</title>
	</header>
	<body>
		<p>
			<em>JUEL</em> tries to be as close as possible to the EL specification. However, the spec
			isn't always clear, leaves some details open and sometimes even seems to be incorrect.
			For these certain gaps, <em>JUEL</em> had to make decisions that could not be derived from
			the specification. We still hope that the specification could be updated to make things
			more clear. Until then, we will have this section to list the specification issues.
		</p>
		<ol>
			<li>
				In section 1.19, "Collected Syntax", the specification defines Nonterminal
				<code>LValueInner</code> (which describes an lvalue expression) as
				<source>LValueInner ::= Identifier | NonLiteralValuePrefix (ValueSuffix)*</source>
				This would mean - since <code>NonLiteralValuePrefix</code> can be expanded to a
				nested expression or function invocation - that <code>${(1)}</code> or <code>${foo()}</code>
				were lvalue expressions.
				<em>JUEL</em> considers this to be a bug and guesses that the above should read as
				<source>LValueInner ::= Identifier | NonLiteralValuePrefix (ValueSuffix)+</source>
				instead.
			</li>
			<li>
				<p>
					In section 1.2.3, "Literal Expressions", the specification states that
					"the escape characters <code>\$</code> and <code>\#</code> can be used to escape
					what would otherwise be treated as an eval-expression". The specification doesn't
					tell us if <code>'\'</code> is used to escape other characters in literal expressions,
					too. Consequently, <em>JUEL</em> treats <code>'\'</code> as escape character only when
					immediately followed by <code>'${'</code> and <code>'#{'</code>.
				</p>
				<note>
					Expression <code>\\${</code> evaluates to <code>'\${'</code>, whereas
					<code>\$</code> evaluates to <code>'\$'</code> and
					<code>\\</code> evaluates to <code>'\\'</code>.
				</note>
				<p/> <!-- TODO fop issue with space-after, so add manual space here -->
			</li>
			<li>
				<p>
					In section 1.3, "Literals", the specification states that
					"Quotes only need to be escaped in a string value enclosed in the same type of quote".
					This suggests that, e.g., "You could escape a single quote in a double-quoted string,
					but it's not necessary". <em>JUEL</em> guesses that you can't and that the above should
					read as "Quotes can only be escaped in a string value enclosed in the same type of quote".
				</p>
				<note>
					The '\' in expression <code>${'\"'}</code> doesn't escape the double quote.
				</note>
				<p/> <!-- TODO fop issue with space-after, so add manual space here -->
			</li>
			<li>
				<p>
					From section 1.2.1.2, "Eval-expressions as method expressions", it is clear that
					a single identifier expression, e.g. <code>${foo}</code>, can be used
					as a method expression. However, the specification doesn't tell <em>how</em>
					to evaluate such a method expression! Unfortunately, there's no obvious guess, here...
					<em>JUEL</em> evaluates method expression <code>${foo}</code> as follows (let
					<code>paramTypes</code> be the supplied expected method parameter types,
					<code>returnType</code> the expected return type):
				</p>
				<ul>
					<li>Evaluate <code>${foo}</code> as a value expression</li>
					<li>
						If the result is an instance of <code>java.lang.reflect.Method</code>
						<ul>
							<li>if the method is not static, then error.</li>
							<li>if the method's parameter types do not match the <code>paramTypes</code>, then error.</li>
							<li>
								if <code>returnType</code> is not <code>null</code> and the method's return type
								does not match <code>returnType</code>, then error.
							</li>
							<li>
								If <code>MethodExpression.invoke(...)</code> was called, invoke
								the found method with the parameters passed to the <code>invoke</code> method.
							</li>
							<li>
								If <code>MethodExpression.getMethodInfo(...)</code> was called, construct
								and return a new <code>MethodInfo</code> object.
							</li>
						</ul>
					</li>
					<li>Otherwise, error</li>				
				</ul>
			</li>
			<li>
				<p>
					Section 1.6, "Operators [] and .", describes the semantics of <code>base[property]</code>.
					If <code>property</code> is <code>null</code>, the speciification states not to resolve
					<code>null</code> on <code>base</code>.
					Rather, <code>null</code> should be returned if <code>getValue(...)</code> has been called
					and a <code>PropertyNotFoundException</code> should be thrown else.
					As a consequence, it would not be possible to resolve <code>null</code> as a key in a map.
					We think that this restriction is not really wanted and more generally, that
					<code>property == null</code> should not even have been treated as a special case.
					We have made an enhancement request, hoping that this will be changed in the future.
					Because this has been explicitly stated in the spec, we had to implement it this way.
					However, <em>JUEL</em>'s builder supports a feature <code>NULL_PROPERTIES</code> to
					let you resolve <code>null</code> like any other property value.
				</p>
				<note>
					Assume that <code>map</code> resolves to a <code>java.util.Map</code>.
					Further assume that feature <code>NULL_PROPERTIES</code> is enabled. Evaluating
					<code>${base[null]}</code> as an rvalue (lvalue) will get (put) the value for key
					<code>null</code> in that map.
				</note>
				<p/> <!-- TODO fop issue with space-after, so add manual space here -->
			</li>
			<li>
				Section 1.19, "Collected Syntax" defines Nonterminal <code>IntegerLiteral</code> to be
				an unsigned integer constant. Then it is said that "The value of an <code>IntegerLiteral</code>
				ranges from <code>Long.MIN_VALUE</code> to <code>Long.MAX_VALUE</code>".
				We take that as a hint that the spec wants us to parse integer literals into
				<code>Long</code> values. However, the positive number <code>|Long.MIN_VALUE|</code> cannot
				be stored in a <code>Long</code> since <code>Long.MAX_VALUE = |Long.MIN_VALUE| - 1</code>.
				We think that the specification should have said that "The value of an <code>IntegerLiteral</code>
				ranges from <code>0</code> to <code>Long.MAX_VALUE</code>".
				Consequently, <em>JUEL</em> rejects <code>|Long.MIN_VALUE| = 9223372036854775808</code>
				as an illegal integer literal.
			</li>
			<li>
				Section 1.19, "Collected Syntax" defines Nonterminal <code>FloatingFointLiteral</code>
				to be an unsigned floating point constant. Then it is said that "The value of a
				<code>FloatingPointLiteral</code> ranges from <code>Double.MIN_VALUE</code> to
				<code>Double.MAX_VALUE</code>".
				We take that as a hint that the spec wants us to parse floating point literals into
				<code>Double</code> values.
				However, since <code>Double.MIN_VALUE</code> is the smallest positive value that can be
				stored in a <code>Double</code>, this would exclude zero from the range of valid floating
				point constants! We think that the specification should have said that "The value of a
				<code>FloatingPointLiteral</code> ranges from <code>0</code> to <code>Double.MAX_VALUE</code>".
				Consequently, <em>JUEL</em> accepts <code>0.0</code> as a legal floating point literal.
			</li>
		</ol>
	</body>
</document>
